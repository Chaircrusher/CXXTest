cmake_minimum_required(VERSION 3.0)

include(ExternalProject)
option(CxxTest_SUPERBUILD "build outer project" ON)
enable_testing()

if(CxxTest_SUPERBUILD)
# The 'SuperBuild' stage that builds jsoncpp as an external project
# and then builds CXX test as an ExternalProject
project(CxxTest_SUPERBUILD)
# common arguments for all builds
set(EP_ARGS
  -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
  -DCMAKE_CXX_COMPILER:PATH=${CMAKE_CXX_COMPILER}
  -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG}
  -DCMAKE_CXX_FLAGS_MINSIZEREL:STRING=${CMAKE_CXX_FLAGS_MINSIZEREL}
  -DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE}
  -DCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}
  -DCMAKE_C_COMPILER:PATH=${CMAKE_C_COMPILER}
  -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
  -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG}
  -DCMAKE_C_FLAGS_MINSIZEREL:STRING=${CMAKE_C_FLAGS_MINSIZEREL}
  -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE}
  -DCMAKE_C_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_C_FLAGS_RELWITHDEBINFO}
  -DCMAKE_EXE_LINKER_FLAGS:STRING=${CMAKE_EXE_LINKER_FLAGS}
  -DCMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=${CMAKE_EXE_LINKER_FLAGS_DEBUG}
  -DCMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}
  -DCMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=${CMAKE_EXE_LINKER_FLAGS_RELEASE}
  -DCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}
  -DCMAKE_MODULE_LINKER_FLAGS:STRING=${CMAKE_MODULE_LINKER_FLAGS}
  -DCMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=${CMAKE_MODULE_LINKER_FLAGS_DEBUG}
  -DCMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL}
  -DCMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=${CMAKE_MODULE_LINKER_FLAGS_RELEASE}
  -DCMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO}
  -DCMAKE_SHARED_LINKER_FLAGS:STRING=${CMAKE_SHARED_LINKER_FLAGS}
  -DCMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=${CMAKE_SHARED_LINKER_FLAGS_DEBUG}
  -DCMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL}
  -DCMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=${CMAKE_SHARED_LINKER_FLAGS_RELEASE}
  -DCMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}
  -DCMAKE_GENERATOR:STRING=${CMAKE_GENERATOR}
)

#
# build the JSON reader
ExternalProject_add(jsoncpp
  GIT_REPOSITORY "https://github.com/open-source-parsers/jsoncpp.git"
  GIT_TAG "6cb2f7bd65d238ecc5c7de717a69aef4c76cfd82"
  SOURCE_DIR jsoncpp
  BINARY_DIR jsoncpp-build
  INSTALL_DIR jsoncpp-install
  CMAKE_GENERATOR ${CMAKE_GENERATOR}
  CMAKE_CACHE_ARGS
  ${EP_ARGS}
  CMAKE_ARGS
  -DJSONCPP_WITH_TESTS:BOOL=OFF
  -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/jsoncpp-install
)
#
# set vars needed to pass into the main project build.
set(JSON_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/jsoncpp-install/include)
set(JSON_LIB_DIR ${CMAKE_CURRENT_BINARY_DIR}/jsoncpp-install/lib)

#
# this is an external project that works in this director
ExternalProject_add(CxxTest
  DEPENDS jsoncpp
  DOWNLOAD_COMMAND ""
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}
  BINARY_DIR CxxTest-build
  CMAKE_GENERATOR ${CMAKE_GENERATOR}
  CMAKE_CACHE_ARGS
  ${EP_ARGS}
  CMAKE_ARGS
  -DCxxTest_SUPERBUILD:BOOL=OFF
  -DJSON_INCLUDE_DIR:PATH=${JSON_INCLUDE_DIR}
  -DJSON_LIB_DIR:PATH=${JSON_LIB_DIR}
  INSTALL_COMMAND ""
  )
else()

#
# the actual CxxTest project
project(CxxTest)
#
# need to find the subdirs
include_directories(${JSON_INCLUDE_DIR})
link_directories(${JSON_LIB_DIR})
#
# the program
add_executable(CxxTest CxxTest.cpp)
#
# needed libraries
target_link_libraries(CxxTest jsoncpp)

#
# the test run
add_test(NAME RunCxxTest
  COMMAND CxxTest ${CMAKE_CURRENT_SOURCE_DIR}/catalog.js other)

endif()